  ====================  легенда  ====================

Верно      — всё хорошо и комментариев не требует
Замечания  — в целом верно, но можно лучше / комментарии
Ошибки     — что-то или всё пошло не так
Неверно    — условие задачи неверно интерпретировано
Нет ответа — файл с решением задачи отсутствует



  =====================  задачи  ====================

1.1. Верно

1.2. Замечания: 
        а) скобки не нужны

1.3. Верно

1.4. Замечания: 
        а) как ещё проще можно сформулировать условие? подсказка: встроенная функция abs()

2.1. Верно

2.2. Замечания: 
        а) лишний вывод, не указанный в задаче, необходимо удалять или комментировать после отладки
        б) когда переменная цикла не нужна, то вместо имени переменной пишем _
        в) range(1, n + 1) эквивалентно range(n) – зачем здесь первый вариант вместо второго?
        г) не стоит в теле цикла перезаписывать переменную цикла

2.3. Замечания: 
        а) не нужно заранее объявлять переменную цикла
        б) избыточный перебор: могут ли быть делителями n числа больше n // 2?
        в) зачем в теле цикла инкрементировать переменную цикла? в неё записываются значения из возвращаемого значения функции range()

2.4. Ошибки: 
        а) лишний вывод в теле цикла
     Замечания: 
        а) когда переменная цикла не нужна, то вместо имени переменной пишем _
        б) range(1, n + 1) эквивалентно range(n) – зачем здесь первый вариант вместо второго?

2.5. Ошибки: 
        а) должны быть выведены все введённые значения
     Замечания: 
        а) как можно обойтись без списка?

2.6. Верно

2.7. Замечания: 
        а) сколько раз используются переменные n и i?
        б) здесь уместно использовать оператор расширенного присваивания
        
            s += int(input())

2.8. Замечания: 
        а) что мешает сначала печатать в цикле первое число из пары? тогда не нужны лишние проверки – весь код:
        
            a, b = 1, 1
            for _ in range(int(input())):
                print(a, end=' ')
                a, b = b, a + b



Изучить таблицу приоритета операторов:
https://docs.python.org/3/reference/expressions.html#operator-precedence



  =====================  баллы  =====================

1.1. 
1.2. 
1.3. 
1.4. 
2.1. 
2.2. 
2.3. 
2.4. 
2.5. 
2.6. 
2.7. 
2.8. 